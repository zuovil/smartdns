name: Docker Image CI with ui

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  get-version:
    name: get latest version number
    runs-on: ubuntu-latest
    outputs:
      CUR_VERSION: ${{ steps.get-version.outputs.CUR_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: VERSION_CONTROL
          fetch-depth: 1
          path: version_control
      - name: get version
        id: get-version
        run: |
          pre_version=$(grep "PREFEX" version_control/VERSION | sed 's/PREFEX=\(.*\)/\1/')
          cur_version=$(grep "CUR_VERS" version_control/VERSION | sed 's/CUR_VERS=\(.*\)/\1/')
          echo "CUR_VERSION=$pre_version$cur_version" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    runs-on: ubuntu-latest
    env:
      GOARCH: aarch64
      FILEARCH: aarch64_cortex-a53
    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: build-smartdns
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          cd ${{ github.workspace }}
          mkdir -p build openssl
          sed -i "s/VER=.*/VER=${{ needs.get-version.outputs.CUR_VERSION }}/" package/build-pkg.sh
          curl -sSL https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz | tar -xz --strip-components 1 -C openssl
          cat > docker-openssl.sh << EOF
          apk add perl make coreutils tar pkgconfig dpkg binutils
          cd /workdir/openssl
          ./Configure no-tests linux-aarch64 enable-quic enable-ktls no-docs
          make clean && make all
          cd /workdir
          export CFLAGS="-I /workdir/openssl/include"
          export LDFLAGS="-L /workdir/openssl"
          ./package/build-pkg.sh --platform linux --arch all --filearch \$FILEARCH-linux --outputdir /workdir/build
          EOF
          docker run --rm -i -v ${{ github.workspace }}:/workdir muslcc/x86_64:aarch64-linux-musl sh /workdir/docker-openssl.sh
          rm build/*

      - name: build-nextjs
        run: |
          git clone https://github.com/PikuZheng/smartdns-webui.git
          docker run --rm -v ${{ github.workspace }}:/workdir node:lts-alpine sh -c "cd /workdir/smartdns-webui && npm install && NODE_ENV=production npm run build --no-analytics"

      - name: build-ui
        run: |
          cat > docker-build.sh << EOF
          cd /workdir/plugin/smartdns-ui
          export OPENSSL_DIR=/workdir/openssl
          export OPENSSL_LIB_DIR="/workdir/openssl"
          export OPENSSL_INCLUDE_DIR="/workdir/openssl/include"
          export RUSTFLAGS='-C link-arg=-Wl,-rpath,./ -C target-feature=-crt-static'
          cargo build --release --target=aarch64-unknown-linux-musl
          cp ./target/aarch64-unknown-linux-musl/release/libsmartdns_ui.so ./
          cp /usr/local/musl/aarch64-unknown-linux-musl/lib/libgcc_s.so.1 ./
          musl-strip libsmartdns_ui.so || true
          musl-strip ../../src/smartdns || true
          musl-strip ../../openssl/libcrypto.so.3 || true
          musl-strip ../../openssl/libssl.so.3 || true
          musl-strip libgcc_s.so.1 || true
          EOF
          docker run --rm -i -v ${{ github.workspace }}:/workdir messense/rust-musl-cross:aarch64-musl sh /workdir/docker-build.sh
          cat > Dockerfile.unknown << 'EOF'
          FROM alpine:3.21
          ENV TZ="Asia/Shanghai"
          COPY ./src/smartdns /usr/sbin
          COPY ./openssl/libcrypto.so ./openssl/libssl.so ./plugin/smartdns-ui/libsmartdns_ui.so ./plugin/smartdns-ui/libgcc_s.so.1 /usr/lib
          COPY ./smartdns-webui/out /wwwroot
          RUN apk add --no-cache tzdata && (ldd /usr/sbin/smartdns 2>&1 | grep -q "libatomic.so" && apk add --no-cache libatomic || true)
          EXPOSE 53/udp 53/tcp 6080/tcp
          VOLUME "/etc/smartdns/"
          HEALTHCHECK --interval=5m CMD test $(nslookup dns.pub 127.0.0.1 |grep answer |wc -l) -gt 0
          CMD ["/usr/sbin/smartdns", "-f", "-x", "-p -"]
          EOF
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password='${{ secrets.DOCKER_PASSWORD }}'
          docker buildx build --no-cache --platform linux/aarch64 --push -t pikuzheng/smartdns:ui-aarch64 -f Dockerfile.unknown .

      - name: send to tencent cloud
        continue-on-error: true
        run: |
          docker login ccr.ccs.tencentyun.com --username=${{ secrets.CCR_USERNAME }} --password='${{ secrets.CCR_PASSWORD }}'
          docker buildx build --no-cache --platform linux/aarch64 --push -t ccr.ccs.tencentyun.com/pikuzheng/smartdns:ui-aarch64 -f Dockerfile.unknown .

      - name: release ipk
        run: |
          cd package/openwrt
          chmod +x make_openwrt_withui.sh
          ./make_openwrt_withui.sh -o ${{ github.workspace }}/build --arch all --filearch $FILEARCH --ver ${{ needs.get-version.outputs.CUR_VERSION }}

      - name: general tag and release ipk
        id: tag
        run: |
          cd ${{ github.workspace }}
          echo "release_tag=${{ needs.get-version.outputs.CUR_VERSION }}_with_ui" >> $GITHUB_OUTPUT
          echo "同步更新上游代码" > release.txt
          echo ${{ github.sha }} >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ github.workspace }}/build/*

  create-manifest:
    name: create docker manifest
    needs:
      - build
      - get-version
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: create manifest
        run: |
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password='${{ secrets.DOCKER_PASSWORD }}'
          docker buildx imagetools create \
            -t pikuzheng/smartdns:ui \
            -t pikuzheng/smartdns:ui-${{ needs.get-version.outputs.CUR_VERSION }} \
            -t pikuzheng/smartdns:latest \
            -t pikuzheng/smartdns:${{ needs.get-version.outputs.CUR_VERSION }} \
            pikuzheng/smartdns:ui-aarch64

          docker login ccr.ccs.tencentyun.com --username=${{ secrets.CCR_USERNAME }} --password='${{ secrets.CCR_PASSWORD }}'
          docker buildx imagetools create \
            -t ccr.ccs.tencentyun.com/pikuzheng/smartdns:ui \
            -t ccr.ccs.tencentyun.com/pikuzheng/smartdns:ui-${{ needs.get-version.outputs.CUR_VERSION }} \
            -t ccr.ccs.tencentyun.com/pikuzheng/smartdns:latest \
            -t ccr.ccs.tencentyun.com/pikuzheng/smartdns:${{ needs.get-version.outputs.CUR_VERSION }} \
            ccr.ccs.tencentyun.com/pikuzheng/smartdns:ui-aarch64 || true
